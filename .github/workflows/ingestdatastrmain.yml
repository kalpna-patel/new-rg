name: Data ingestion for pace-metrics to Azure Blob Storage

 inputs:
  fileList:
    description: A comma-separated list of files from which the json file(s) will be retrieved (either local or remote)
    required: false
  jsonPayload:
    description: Payload file or data to be ingested (either local or remote URL)
    required: false
  nameIngest:
    description: Name of the ingestion (filename of the ingestion schema)
    required: true
  nameSignatureSecret:
    description: Name of the ingestion (filename of the ingestion schema)
    required: true
    default: secrets-signature-sha-256
  keyVaultUri:
    description: Key-Vault for encryption and webhook secret
    required: true
    default: https://ingest-key-01.vault.azure.net/
  client-id:
    description: Client ID for OIDC authentication in key-vault
    required: true
    default: 6e1ce853-cdf5-4606-a774-bf24c7f365de
  tenant-id:
    description: Tenant ID for OIDC authentication
    required: true
    default: 986595ef-8677-40e7-adbf-dfca10b0321d
  storage-account-name:
    description: Azure Storage Account name to upload the data
    required: true
  container-name:
    description: Azure Blob Storage container name
    required: true

runs:
  using: "composite"
  main: "entrypoint.sh"  # Specify the main file to run in the composite action

  steps:
    - name: Check if Azure CLI is installed
      shell: bash
      run: |
        if ! az > /dev/null 2>&1; then
          echo "Install Azure CLI"
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        fi
        echo "Azure CLI Version"
        az version

    - name: Azure OIDC Login
      uses: azure/login@a48c1681a-7a9d-4d8e-9c0d-141d0af16ddc # v2.2.0
      with:
        client-id: $'6e1ce853-cdf5-4606-a774-bf24c7f365de'
        tenant-id: $'986595ef-8677-40e7-adbf-dfca10b0321d'
        allow-no-subscriptions: true

    - name: Check for existence of payload file
      id: payload_check
      shell: bash
      run: |
        IFS=',' read -ra FILES <<<"${{ inputs.fileList }}"
        if [[ ${#FILES[@]} -gt 0 ]]; then
          ALL_FILE_LIST_EXISTS=1
        else
          ALL_FILE_LIST_EXISTS=0
        fi
        for FILE in "${FILES[@]}"; do
          FILE=$(echo "$FILE" | xargs)
          if [[ ! -f "${FILE}" ]] && [[ ! "${FILE}" =~ ^http[s]?:// ]]; then
            echo "The following file does not exist: ${FILE}"
            ALL_FILE_LIST_EXISTS=0
            break
          fi
        done
        if [[ "${{ inputs.jsonPayload }}" == *{*}* ]] || [[ -f "${{ inputs.jsonPayload }}" ]] || [[ ${ALL_FILE_LIST_EXISTS} -eq 1 ]]; then
          echo "payload_exists=true" >> $GITHUB_OUTPUT
        else
          echo "::warning::JSON payload file '${{ inputs.jsonPayload }}' does not exist and will not be ingested"
          echo "payload_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Install required python packages
      shell: bash
      run: |
        python3 -m pip install azure-storage-blob azure-keyvault-secrets azure-identity requests

    - name: Download remote payload if necessary
      id: download_payload
      shell: bash
      if: steps.payload_check.outputs.payload_exists == 'true'
      run: |
        if [[ "${{ inputs.jsonPayload }}" =~ ^http[s]?:// ]]; then
          echo "Downloading payload from remote URL: ${{ inputs.jsonPayload }}"
          curl -o payload.json "${{ inputs.jsonPayload }}"
        elif [[ ${ALL_FILE_LIST_EXISTS} -eq 1 ]]; then
          echo "Using local file(s) from fileList."
        fi

    - name: Ingest data to Azure Blob Storage
      shell: bash
      if: steps.payload_check.outputs.payload_exists == 'true'
      run: |
        python3 $GITHUB_ACTION_PATH/kalpna.py "${{ inputs.fileList }}" '${{ inputs.jsonPayload }}' "${{ inputs.nameIngest }}" "${{ inputs.keyVaultUri }}" "${{ inputs.nameSignatureSecret }}" "${{ inputs.storage-account-name }}" "${{ inputs.container-name }}"
